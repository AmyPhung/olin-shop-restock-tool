import os
from flask import Flask, request, redirect, url_for, render_template, send_from_directory
from werkzeug.utils import secure_filename
from PyPDF2 import PdfFileReader, PdfFileWriter
from shutil import copyfile

# Relative paths
from modules.inventorylib import Inventory
from modules.labelslib import LabelGenerator


INVENTORY_URL = 'https://docs.google.com/spreadsheets/d/1FqDo6pPHvlgrsp8z4VJyQzSa6x8cxxIfXJ09ugByXi4/edit?usp=sharing'
INVENTORY_DIR = 'output/autogenerated_inventory.csv'
LABELS_DIR = 'output/autogenerated_labels.pdf'

inv = Inventory(INVENTORY_URL, INVENTORY_DIR)

app = Flask(__name__, static_url_path="/static")

@app.route('/', methods=['GET'])
def index():
    return render_template('index.html', inv_list=inv.inventory['Name'])

@app.route('/', methods=['POST'])
def refreshInventory():
    print("Refreshing inventory")
    inv.update()
    return render_template('index.html', inv_list=inv.inventory['Name'])

@app.route('/action', methods=['POST'])
def handleFormData():
    inv.selection = request.form.getlist('duallistbox_parts[]')
    print("Items selected:")
    print(inv.selection)
    part_nums = inv.getPartNumbers()
    return render_template('action.html', sel_list=inv.selection,
        num_list=part_nums)

@app.route('/download', methods=['GET'])
def downloadPdf():
    return send_from_directory(directory='output', filename='autogenerated_labels.pdf')

@app.route('/create', methods=['POST'])
def generateLabels():
    l = LabelGenerator()
    l.generateLabels(inv.selection)
    l.save_pdf(LABELS_DIR)
    return redirect(url_for('downloadPdf'))

@app.route('/order', methods=['POST'])
def generateOrder():
    order_list = inv.printOrder()
    return render_template('order.html', o_list=order_list)

# Stock theme pages
@app.route('/elements.html', methods=['GET'])
def elements():
    return render_template('examples/elements.html')

@app.route('/generic.html', methods=['GET'])
def generic():
    return render_template('examples/generic.html')
