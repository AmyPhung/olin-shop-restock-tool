import tkinter as tk
from tkinter.scrolledtext import ScrolledText
import pandas as pd
import numpy as np
import csv

# Relative paths
from labels import LabelGenerator

class Page(tk.Frame):
    def __init__(self, page_num, inventory):
        tk.Frame.__init__(self)

        self.df = inventory[inventory["Drawer"] == page_num]

        scrollbar = tk.Scrollbar(self)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.listbox = tk.Listbox(self, selectmode="multiple")
        self.listbox.pack(fill="both", expand=True)

        idx_list = np.where(inventory["Drawer"] == page_num)
        for idx in idx_list[0]:
            self.listbox.insert(tk.END, inventory["Name"][idx])

        # attach listbox to scrollbar
        self.listbox.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.listbox.yview)

        self.part_numbers = []
        self.part_names = []

    def show(self):
        self.lift()

    def updateSelection(self):
        values = [self.listbox.get(idx) for idx in self.listbox.curselection()]

        selected = self.df[self.df["Name"].isin(values)] #todo: make this not a copy

        self.part_numbers = selected["McMaster #"]
        self.part_names = selected["Name"]

def createCheckbox(frame, item):
    var = tk.IntVar()
    tk.Checkbutton(frame, text=item, variable=var).pack(side="top", fill="both", expand=True)
    return var

def createPages(num_pages, inventory):
    pages = []
    for i in range(num_pages):
        pages.append(Page(i+1, inventory))
    return pages

class MainView(tk.Frame):
    def __init__(self, root, inventory):
        tk.Frame.__init__(self, root)
        self.inventory = inventory
        self.pages = createPages(6, inventory) # Add a page here for each drawer TODO: make this automatic
        self.buttons = []
        self.QR_mode = False
        self.QR_text = None

        self.buttonframe = tk.Frame(self)
        self.container = tk.Frame(self)
        self.buttonframe.pack(side="top", fill="x", expand=False)
        self.container.pack(side="top", fill="both", expand=True)

        for page_idx in range(0,len(self.pages)):
            page = self.pages[page_idx]
            page.place(in_=self.container, x=0, y=0, relwidth=1, relheight=1)

            page_btn = tk.Button(self.buttonframe, text="Page " + str(page_idx + 1),
                command=lambda page_idx=page_idx: self.updateFrame(page_idx))
                # page_idx=page_idx forces updateFrame to use the value of
                # page_idx when button was created
            page_btn.pack(side="left")

            self.buttons.append(page_btn)

        create_btn = tk.Button(self.buttonframe, text="Create Order", command=self.createCSV)
        create_btn.pack(side="right")

        label_btn = tk.Button(self.buttonframe, text="Create Labels", command=self.createLabels)
        label_btn.pack(side="right")

        label_btn = tk.Button(self.buttonframe, text="Use QR", command=self.useQR)
        label_btn.pack(side="right")

        self.current_frame = 0
        self.updateFrame(0)

    def updateFrame(self, page_idx):
        self.pages[self.current_frame].updateSelection() # update old page
        self.pages[page_idx].show() # show new page
        self.current_frame = page_idx

    def createCSV(self):
        if self.QR_mode == True:
            QR_list = self.QR_text.get('1.0', tk.END).splitlines()

            selected = self.inventory[self.inventory["Name"].isin(QR_list)]

            part_numbers = selected["McMaster #"]

        else:
            self.updateFrame(self.current_frame)
            part_numbers = []
            for page in self.pages:
                d = list(page.part_numbers)
                part_numbers = part_numbers + d

        quantity = np.ones(len(part_numbers))

        data = {'Part Numbers': part_numbers,
                'Quantity': quantity
        }

        df = pd.DataFrame(data, columns= ['Part Numbers','Quantity'])
        df.to_csv('output/autogenerated_order.csv', index = None, header=True)

        print("Saved to file output/autogenerated_order.csv")

    def createLabels(self):
        # Get selected part name list
        self.updateFrame(self.current_frame)
        part_names = []
        for page in self.pages:
            d = list(page.part_names)
            part_names = part_names + d

        # Create labels
        l = LabelGenerator()
        l.generateLabels(part_names)
        l.save_pdf("output/autogenerated_labels.pdf")

        print("Saved to file output/autogenerated_labels.pdf")

    def useQR(self):
        self.QR_mode = True

        self.container.destroy()
        qr_frame = tk.Frame(self)
        qr_frame.pack(side="top", fill="both", expand=True)

        self.QR_text = ScrolledText(qr_frame)
        self.QR_text.pack(fill="both", expand=True)

if __name__ == "__main__":
    inventory = pd.read_csv('master_inventory.csv')

    root = tk.Tk()
    main = MainView(root, inventory)
    main.pack(side="top", fill="both", expand=True)
    root.wm_geometry("600x1000")
    root.mainloop()
